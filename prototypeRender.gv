digraph G {
    label="Vue.prototype._render = function () {}"
    varVm [
        label="const vm = this"
    ]
    varRender [
        label="const { render, _parentVnode } = vm.$options"
    ]
    varVm -> varRender

    vmIsMounted [
        label="vm._isMounted"
        shape=diamond
    ]

    varRender -> vmIsMounted


    vmIsMounted -> walkSlots [label="yes"]
    subgraph cluster_walk {
        graph[style=dotted]
        label=""

        walkSlots [
            label="for (const key in vm.$slots) {"
        ]
        varSlot [
            label="const slot = vm.$slots[key]"
        ]
        walkSlots -> varSlot
        render [
            label="slot._render"
            shape=diamond
        ]
        varSlot -> render
        cloneNode [
            label="vm.$slots[key] = cloneVNodes(slot, true /* deep */)"
        ]
        render -> cloneNode [label="yes"]
    }
    setScopeSlots [
        label="vm.$scopedSlots = (_parentVnode && _parentVnode.data.scopedSlots) || emptyObject"
    ]
    vmIsMounted -> setScopeSlots
    cloneNode -> setScopeSlots

    setVnode [
        label="vm.$vnode = _parentVnode"
    ]
    setScopeSlots -> setVnode
    varNode [
        label="let vnode"
    ]
    setVnode -> varNode
    invokeRender [
        label="vnode = render.call(vm._renderProxy, vm.$createElement)"
    ]
    varNode -> invokeRender
    isInstance [
        label="vnode instanceof VNode"
        shape=diamond
    ]
    invokeRender -> isInstance
    notProduction [
        label="process.env.NODE_ENV !== 'production' && Array.isArray(vnode)"
        shape=diamond
    ]
    isInstance -> notProduction [label="yes"]
    notProduction -> warn [label="yes"]
    resetVnode [
        label="vnode = createEmptyVNode()"
    ]
    warn -> resetVnode
    notProduction -> resetVnode

    setParent [
        label="vnode.parent = _parentVnode"
    ]
    isInstance -> setParent
    resetVnode -> setParent

    return [
        label="return vnode"
    ]
    setParent -> return
}