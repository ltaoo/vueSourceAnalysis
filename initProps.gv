digraph G {
    graph [
        label="core/instance/state.js"
        fontcolor=blue
    ]
    start0 [
        label="function initProps(vm, propsOptions) {"
    ]
    varPropsData [
        label="const propsData = vm.$options.propsData || {}"
    ]
    start0 -> varPropsData
    varProps [
        label="const props = vm._props = {}"
        fontcolor=red
    ]
    varPropsData -> varProps
    varKeys [
        label="const keys = vm.$options._propKeys = []"
    ]
    varProps -> varKeys
    varIsRoot [
        label="const isRoot = !vm.$parent"
    ]
    varKeys -> varIsRoot

    setShoudConvert [
        label="observerState.shouldConvert = isRoot"
    ]
    varIsRoot -> setShoudConvert
    walkPropsOptions [
        label="for (const key in propsOptions) {"
    ]
    setShoudConvert -> walkPropsOptions
    subgraph cluster_walk {
        graph[
            label=""
            style=dotted
        ]
        saveKey [
            label="keys.push(key)"
        ]

        walkPropsOptions -> saveKey
        validateProp [
            label="const value = validateProp(key, propsOptions, propsData, vm)"
        ]
        saveKey -> validateProp
        notProduction [
            label="process.env.NODE_ENV !== 'production'"
            shape=diamond
        ]
        validateProp -> notProduction
        varHyphenatedKey [
            label="const hyphenatedKey = hyphenate(key)"
        ]
        notProduction -> varHyphenatedKey [label="yes"]
        isReseve [
            label="isReservedAttribute(hyphenatedKey) || config.isReservedAttr(hyphenatedKey)"
            shape=diamond
        ]
        varHyphenatedKey -> isReseve
        isReseve -> warn [label="yes"]
        defineReactive0 [
            label="defineReactive(props, key, value, () => {
                if (vm.$parent && !isUpdatingChildComponent) {
                    warn('...')
                }
            }"
        ]
        isReseve -> defineReactive0
        warn -> defineReactive0
        defineReactive [
            label="defineReactive(props, key, value)"
        ]
        notProduction -> defineReactive [label="no"]
        keyInVm [
            label="!(key in vm)"
            shape=diamond
        ]
        defineReactive0 -> keyInVm
        defineReactive -> keyInVm
        proxy0 [
            label="proxy(vm, `_props`, key)"
        ]
        keyInVm -> proxy0 [label="yes"]
    }
    resetShouldConvert [
        label="observerState.shouldConvert = true"
    ]
    keyInVm -> resetShouldConvert
    proxy0 -> resetShouldConvert
}