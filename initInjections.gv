digraph G {
    label="initInjections(vm)"

    getResult [
        label="result=resolveInjection(vm.$options.inject, vm)"
    ]
    setShouldConvert [
        label="observerState.shouldConvert = false"
    ]
    getResult -> setShouldConvert [label="result is true"]

    forKeys [
        label="Object.keys(result).forEach()"
    ]

    setShouldConvert -> forKeys

    subgraph cluster_for {
        graph[style=dotted]
        forKeys -> defineReactive
    }
    resetShouldConvert [
        label="observerState.shouldConvert = true"
    ]
    defineReactive -> resetShouldConvert

    subgraph cluster_resolveRejection {
        graph[style=dotted]
        lable="resolveRejection(inject, vm)"

        ifInject [
            label="if(inject)"
            shape=diamond
        ]

        getNewResult [
            label="result = Object.create(null)"
        ]
        ifInject -> getNewResult [label="yes"]

        getKeys [
            label="keys = hasSymbol ? Reflect.ownKeys().filter() : Object.keys()"
        ]

        getNewResult -> getKeys

        
    }
    subgraph cluster_walk {
        graph[style=dotted]
        label="for"

        walkKeys [
            label="for(let i = 0; i < keys.length; i += 1) {}"
        ]
        getKeys -> walkKeys
        getProvideKey [
            label="provideKey=inject[keys[i]].from"
        ]
        walkKeys -> getProvideKey

        getSource [
            label="source = vm"
        ]

        getProvideKey -> getSource
    }
    subgraph cluster_walkSource {
        graph[style=dotted]

        walkSource [
            label="while(source)"
        ]
        getSource -> walkSource

        setResult [
            label="result[key] = source._provided[provideKey]"
        ]
        walkSource -> setResult [label="if (source._provided && provideKey in source._provided)"]
    }
}