digraph G {
    graph [
        label="platforms/web/entry-runtime-with-compiler.js"
        fontcolor=blue
    ]

    start [
        label="Vue.prototype.$mount = function (el, hydrating) {"
    ]

    resetEl [
        label="el = el || query(el)"
    ]
    start -> resetEl
    isBody [
        label="el === document.body || el === document.documentElement"
        shape=diamond
    ]
    resetEl -> isBody
    notProduction [
        label="process.env.NODE_ENV !== 'production'"
        shape=diamond
    ]
    isBody -> notProduction [label="yes"]
    warn0 [
        label="warn()"
    ]
    notProduction -> warn0 [label="yes"]
    returnThis [
        label="return this"
    ]
    notProduction -> returnThis
    warn0 -> returnThis
    varOptions [
        label="const options = this.$options"
    ]
    isBody -> varOptions
    renderExist [
        label="!options.render"
        shape=diamond
    ]
    varOptions -> renderExist
    varTemplate [
        label="let template = options.template"
    ]
    renderExist -> varTemplate [label="yes"]
    templateExist [
        label="template"
        shape=diamond
    ]
    varTemplate -> templateExist
    templateIsString [
        label="typeof template === 'string'"
        shape=diamond
    ]
    templateExist -> templateIsString [label="yes"]
    templateStartIsByChar [
        label="template.charAt(0) === '#'"
        shape=diamond
    ]
    templateIsString -> templateStartIsByChar [label="yes"]
    resetTemp [
        label="template = idToTemplate(template)"
    ]
    templateStartIsByChar -> resetTemp [label="yes"]

    tempIsNode [
        label="template.nodeType"
    ]
    resetTempIsInner [
        label="template = template.innerHTML"
        shape=diamond
    ]
    templateIsString -> tempIsNode [label="no"]
    tempIsNode -> resetTempIsInner [label="yes"]

    warn [
        label="warn; return this"
    ]
    tempIsNode -> warn [label="no"]

    elExist [
        label="el"
        shape=diamond
    ]
    resetTempIsOut [
        label="template = getOuterHTML(el)"
    ]
    templateExist -> elExist [label="no"]
    elExist -> resetTempIsOut [label="yes"]

    templateExist1 [
        label="template"
        shape=diamond
    ]

    resetTemp -> templateExist1
    resetTempIsInner -> templateExist1
    resetTempIsOut -> templateExist1

    getRenderAndFunc [
        label="const { render, staticRenderFns } = compileToFunctions(template, {
            shouldDecodeNewlines,
            shouldDecodeNewlinesForHref,
            delimiters: options.delimiters,
            comments: options.comments
        }, this)"
    ]

    templateExist1 -> getRenderAndFunc

    setRender [
        label="options.render = render"
    ]
    setStaticRenderFns [
        label="options.staticRenderFns = staticRenderFns"
    ]

    getRenderAndFunc -> setRender
    setRender -> setStaticRenderFns

    renderExist -> returnValue [label="no"]

    returnValue [
        label="return mount.call(this, el, hydrating)"
    ]
    setStaticRenderFns -> returnValue
}