digraph G {
    graph [
        label="core/instance/inject.js"
        fontcolor=blue
    ]

    start [
        label="initInjections(vm)"
    ]

    varResult [
        label="const result=resolveInjection(vm.$options.inject, vm)"
    ]
    start -> varResult
    result1 [
        label="result"
        shape=diamond
    ]
    varResult -> result1
    setShouldConvert [
        label="observerState.shouldConvert = false"
    ]
    result1 -> setShouldConvert [label="yes"]

    forKeys [
        label="Object.keys(result).forEach(key => {"
    ]

    setShouldConvert -> forKeys

    subgraph cluster_for {
        graph[
            label=""
            style=dotted
        ]
        notProduction [
            label="process.env.NODE_ENV !== 'production'"
            shape=diamond
        ]
        forKeys -> notProduction
        defineReactive1 [
            label="defineReactive(vm, key, result[key], () => {warn()})"
        ]
        notProduction -> defineReactive1 [label="yes"]
        defineReactive2 [
            label="defineReactive(vm, key, result[key])"
        ]
        notProduction -> defineReactive2 [label="no"]
    }
    resetShouldConvert [
        label="observerState.shouldConvert = true"
    ]
    defineReactive1 -> resetShouldConvert
    defineReactive2 -> resetShouldConvert
}