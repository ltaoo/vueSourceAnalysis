digraph G {
    graph [
        label="core/instance/state.js"
        fontcolor=blue
    ]
    start [
        label="function initComputed(vm, computed)"
    ]
    varWatchers [
        label="const watchers = vm._computedWatchers = Object.create(null)"
        fontcolor=red
    ]
    start -> varWatchers
    varIsSSR [
        label="const isSSR = isServerRendering()"
    ]
    varWatchers -> varIsSSR
    varIsSSR -> walkComputed
    subgraph cluster_walk {
        graph[style=dotted]
        walkComputed [
            label="for(const key in computed) {"
        ]
        varUserDef [
            label="const userDef = computed[key]"
        ]
        walkComputed -> varUserDef

        varGetter [
            label="const getter = typeof userDef === 'function' ? userDef : userDef.get"
        ]
        varUserDef -> varGetter
        notProduction0 [
            label="process.env.NODE_ENV !== 'production' && getter == null"
            shape=diamond
        ]
        varGetter -> notProduction0
        warn0 [
            label="warn()"
        ]
        notProduction0 -> warn0 [label="yes"]

        notSsr [
            label="!isSSR"
            shape=diamond
        ]
        notProduction0 -> notSsr
        warn0 -> notSsr
        newWatcher [
            label="watchers[key] = new Watcher(vm, getter || noop, noop, computedWatcherOptions)"
        ]
        notSsr -> newWatcher [label="yes"]
        keyInVm [
            label="!(key in vm)"
            shape=diamond
        ]
        notSsr -> keyInVm
        newWatcher -> keyInVm
        defineComputed [
            label="defineComputed(vm, key, userDef)"
        ]
        keyInVm -> defineComputed [label="yes"]
        notProduction1 [
            label="process.env.NODE_ENV !== 'production'"
        ]
        keyInVm -> notProduction1 [label="no"]
        keyInData [
            label="key in vm.$data"
            shape=diamond
        ]
        notProduction1 -> keyInData
        warn1 [
            label="warn()"
        ]
        keyInData -> warn1 [label="yes"]
        warn2 [
            label="warn()"
        ]
        keyInData -> warn2 [label="no"]
    }

}