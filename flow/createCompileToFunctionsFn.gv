digraph G {
    label="createCompileToFunctionFn(compile)"

    getCache [
        label="cache = Object.create(null)"
    ]

    returnFn [
        label="return function compileToFunctions() {}"
    ]
    getCache -> returnFn

    subgraph cluster_compileToFunctions {
        graph[style=dotted]
        label="compileToFunctions(template, options, vm)"
        getOptions [
            label="options = extend({}, options)"
        ]

        getWarn [
            label="warn = options.warn || basrWarn"
        ]
        getOptions -> getWarn
        deleteWarn [
            label="delete options.warn"
        ]
        getWarn -> deleteWarn

        optionsDelimiters [
            label="options.delimiters"
            shape=diamond
        ]

        deleteWarn -> optionsDelimiters
        setKey0 [
            label="key = String(options.delimiters) + template"
        ]
        optionsDelimiters -> setKey0 [label="yes"]
        setKey1 [
            label="key = template"
        ]
        optionsDelimiters -> setKey1 [label="no"]
        checkCache [
            label="cache[key]"
            shape=diamond
        ]

        setKey0 -> checkCache
        setKey1 -> checkCache

        returnCache [
            label="return cache[key]"
        ]
        checkCache -> returnCache [label="yes"]

        getCompiled [
            label="compiled = compile(template, options)"
        ]
        checkCache -> getCompiled
        getRes [
            label="res = {}"
        ]
        getCompiled -> getRes
        fnGenErrors [
            label="fnGenErrors = []"
        ]
        getRes -> fnGenErrors

        setRender [
            label="res.render = createFunction(compiled.render, fnGenErrors);"
        ]
        fnGenErrors -> setRender
        setStaticRenderFns [
            label="res.staticRenderFns = compiled.staticRenderFns.map(code => createFunction(code, fnGenErrors))"
        ]
        setRender -> setStaticRenderFns

        returnRes [
            label="return (cache[key] = res)"
        ]
        setStaticRenderFns -> returnRes
    }

    subgraph cluster_createFunc {
        graph[style=dotted]
        label="createFunction(code)"

        try [
            label="try { new Function(code)}"
        ]

        catch [
            label="catch(err) {return noop}"
        ]
        try -> catch
    }
}