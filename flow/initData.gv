digraph G {
    graph [
        label="core/instance/state.js"
        fontcolor=blue
    ]
    start [
        label="function initData(vm)"
    ]
    varData [
        label="let data = vm.$options.data"
    ]
    start -> varData
    resetData [
        label="data = typeof data === 'function' ? getData(data, vm) : data || {}"
    ]
    varData -> resetData
    dataIsPlain [
        label="!isPlainObject(data)"
        shape=diamond
    ]
    resetData -> dataIsPlain
    resetData1 [
        label="data = {}"
    ]
    dataIsPlain -> resetData1 [label="yes"]
    notProduction0 [
        label="process.env.NODE_ENV !== 'production'"
    ]
    resetData1 -> notProduction0
    warn0 [
        label="warn()"
    ]
    notProduction0 -> warn0 [label="yes"]
    varKeys [
        label="const keys = Object.keys(data)"
    ]
    warn0 -> varKeys
    dataIsPlain -> varKeys
    varProps [
        label="const props = vm.$options.props"
    ]
    varKeys -> varProps
    varMethods [
        label="const methods = vm.$options.methods"
    ]
    varProps -> varMethods
    varI [
        label="let i = keys.length"
    ]
    varMethods -> varI
    varI -> while
    subgraph cluster_while {
        graph [
            label=""
            style=dotted
        ]
        while [
            label="while(i--)"
        ]
        varKey [
            label="const key = keys[i]"
        ]
        while -> varKey
        notProduction1 [
            label="process.env.NODE_ENV !== 'production'"
            shape=diamond
        ]
        varKey -> notProduction1
        hasOwnMethod [
            label="methods && hasOwn(methods, key)"
            shape=diamond
        ]
        notProduction1 -> hasOwnMethod [label="yes"]
        warn1 [
            label="warn()"
        ]
        hasOwnMethod -> warn1 [label="yes"]
        hasProp [
            label="props && hasOwn(props, key)"
            shape=diamond
        ]
        warn1 -> hasProp
        hasOwnMethod -> hasProp
        notProduction1 -> hasProp
        notProduction2 [
            label="process.env.NODE_ENV !== 'production'"
            shape=diamond
        ]
        hasProp -> notProduction2 [label="yes"]
        warn2 [
            label="warn()"
        ]
        notProduction2 -> warn2 [label="yes"]
        notReserved [
            label="!isReserved(key)"
            shape=diamond
        ]
        hasProp -> notReserved [label="no"]
        proxy [
            label="proxy(vm, `_data`, key)"
        ]
        notReserved -> proxy [label="yes"]
    }
    observeData [
        label="observe(data, true /* asRootData */)"
    ]
    warn2 -> observeData
    proxy -> observeData

    subgraph cluster_getData {
        graph[style=dotted]
        label="getData(data, vm)"

        return [
            label="return data.call(vm, vm) || {}"
        ]
    }
}