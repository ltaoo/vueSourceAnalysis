digraph G {
    graph [
        label="core/instance/lifecycle.js"
        fontcolor=blue
    ]
    start [
        label="function mountComponent(vm, el, hydrating) {"
    ]
    setEl [
        label="vm.$el = el"
        fontcolor=red
    ]
    start -> setEl
    renderNotExist [
        label="!vm.$options.render"
        shape=diamond
    ]
    setEl -> renderNotExist
    setRender [
        label="vm.$options.render = createEmptyVNode"
    ]
    renderNotExist -> setRender [label="yes"]
    notProduction [
        label="process.env.NODE_ENV !== 'production'"
        shape=diamond
    ]
    setRender -> notProduction
    end [
        label="(vm.$options.template && vm.$options.template.charAt(0) !== '#') || vm.$options.el || el"
        shape=diamond
    ]
    notProduction -> end [label="yes"]
    warn0 [
        label="warn()"
    ]
    end -> warn0 [label="yes"]
    warn1 [
        label="warn()"
    ]
    end -> warn1 [label="no"]
    callBeforeMountedHook [
        label="callHook(vm, 'beforeMounted')"
        color=green
        fontcolor=green
    ]
    notProduction -> callBeforeMountedHook
    renderNotExist -> callBeforeMountedHook

    varUpdateComponent [
        label="let updateComponent"
    ]
    callBeforeMountedHook -> varUpdateComponent
    isProduction [
        label="process.env.NODE_ENV !== 'production' && config.performance && mark"
        shape=diamond
    ]
    varUpdateComponent -> isProduction
    todo [
        label="..."
    ]
    isProduction -> todo [label="yes"]
    resetComponent [
        label="updateComponent = () => {
            const vnode = vm._render();
            vm._update(vnode, hydrating)
        }"
    ]
    isProduction -> resetComponent [label="no"]
    initWatcher [
        label="vm._watcher = new Watcher(vm, updateComponent, noop)"
        fontcolor=red
    ]
    resetComponent -> initWatcher
    setHydrating [
        label="hydrating = false"
    ]
    initWatcher -> setHydrating

    vnodeIsNull [
        label="vm.$vnode == null"
        shape=diamond
    ]

    setHydrating -> vnodeIsNull
    setMounted [
        label="vm._isMounted = true"
        fontcolor=red
    ]
    vnodeIsNull -> setMounted [label="yes"]
    callMountedHook [
        label="callHook(vm, 'mounted')"
        color=green
        fontcolor=green
    ]
    setMounted -> callMountedHook
    returnVm [
        label="return vm"
    ]
    vnodeIsNull -> returnVm
    callMountedHook -> returnVm

}