digraph G {
    label="updateChildComponent(child, propsData, listeners, parentVnode, renderChildren)"

        getHasChildren [
            label="!!(renderChildren
                || vm.$options._renderChildren 
                || parentVnode.data.scopedSlots 
                || vm.$scopedSlots !== emptyObject)"
        ]
        hasChildren [
            label="hasChildren"
            shape=diamond
        ]
        setParentVnode [
            label="vm.$options._parentVnode = parentVnode"
        ]
        getHasChildren -> setParentVnode
        setVnode [
            label="vm.$vnode = parentVnode"
        ]
        setParentVnode -> setVnode
        hasVnode [
            label="vm._vnode"
            shape=diamond
        ]

        setVnode -> hasVnode
        setVnodeParent [
            label="vm._vnode.parent = parentVnode"
        ]
        hasVnode -> setVnodeParent [label="yes"]

        setRenderChildren [
            label="vm.$options._renderChildren = renderChildren"
        ]
        setVnodeParent -> setRenderChildren
        hasVnode -> setRenderChildren

        setAttrs [
            label="vm.$attrs = (parentVnode.data && parentVnode.data.attrs) || emptyObject"
        ]

        setRenderChildren -> setAttrs
        setListeners [
            label="vm.$listeners = listeners || emptyObject"
        ]
        setAttrs -> setListeners

        hasProps [
            label="propsData && vm.$options.props"
            shape=diamond
        ]

        setListeners -> hasProps
        observerStateShouldConvert [
            label="observerState.shouldConvert = false"
        ]
        hasProps -> observerStateShouldConvert [label="yes"]

        getProps [
            label="props = vm._props"
        ]
        observerStateShouldConvert -> getProps
        getPropsKeys [
            label="const propKeys = vm.$options._propKeys || []"
        ]
        getProps -> getPropsKeys
        getPropsKeys -> walkPropKeys
        walkPropKeys [
            label="for (let i = 0; i < propKeys.length; i++) {"
        ]
        subgraph cluster_walk {
            graph[style=dotted]
            validate [
                label="props[keys[i]] = validateProp(keys[i], vm.$options.props, propsData, vm)"
            ]
            walkPropKeys -> validate
        }

        observerStateShouldConvertBeTrue [
            label="observerState.shouldConvert = true"
        ]
        validate -> observerStateShouldConvertBeTrue
        setPropsData [
            label="vm.$options.propsData = propsData"
        ]
        observerStateShouldConvertBeTrue -> setPropsData

        listeners [
            label="listeners"
            shape=diamond
        ]

        hasProps -> listeners

        setPropsData -> listeners

        getOldListeners [
            label="const oldListeners = vm.$options._parentListeners"
        ]

        listeners -> getOldListeners [label="yes"]
        setParentListeners [
            label="vm.$options._parentListeners = listeners"
        ]
        getOldListeners -> setParentListeners
        updateListeners [
            label="updateComponentListeners(vm, listeners, oldListeners)"
        ]
        setParentListeners -> updateListeners

        listeners -> hasChildren
        updateListeners -> hasChildren

        setSlots [
            label="vm.$slots = resolveSlots(renderChildren, parentVnode.context)"
        ]
        hasChildren -> setSlots [label="yes"]
        forcsUpdate [
            label="vm.$forceUpdate()"
        ]
        setSlots -> forcsUpdate
}