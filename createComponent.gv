digraph G {
    label="createComponent(Ctor, data, context, children, tag)"

    CtorIsUndef [
        label="isUndef(Ctor)"
        shape=diamond
    ]
    end [
        label="return"
    ]
    CtorIsUndef -> end [label="yes"]
    getBase [
        label="baseCtor = context.$options._base"
    ]
    CtorIsUndef -> getBase
    isObject [
        label="isObject(Ctor)"
        shape=diamond
    ]
    getBase -> isObject
    extend [
        label="Ctor = baseCtor.extend(Ctor)"
    ]
    isObject -> extend [label="yes"]
    notFunction [
        label="typeof Ctor === function"
        shape=diamond
    ]
    isObject -> notFunction
    extend -> notFunction
    notProduction [
        label="process.env.NODE_ENV !== 'production'"
        shape=diamond
    ]
    notFunction -> notProduction [label="no"]
    end1 [
        label="warn; return"
    ]
    notProduction -> end1 [label="yes"]
    getAsyncFactory [
        label="let asyncFactory"
    ]

    notFunction -> getAsyncFactory
    cidIsUndef [
        label="isUndef(Ctor.cid)"
        shape=diamond
    ]
    getAsyncFactory -> cidIsUndef
    resetAsyncFactory [
        label="asyncFactory = Ctor"
    ]
    cidIsUndef -> resetAsyncFactory [label="yes"]
    resetCtor [
        label="Ctor = resolveAsyncComponent(asyncFactory, baseCtor, context)"
    ]
    resetAsyncFactory -> resetCtor
    newCtorIsUndf [
        label="Ctor === undefined"
        shape=diamond
    ]
    resetCtor -> newCtorIsUndf
    returnFunc [
        label="return createAsyncPlaceholder("
    ]
    newCtorIsUndf -> returnFunc [label="yes"]

    setData [
        label="data = data || {}"
    ]
    cidIsUndef -> setData

    resolveConstructorOptions [
        label="resolveConstructorOptions(Ctor)"
    ]
    setData -> resolveConstructorOptions

    modelIsUndef [
        label="isUndef(data.model)"
        shape=diamond
    ]

    resolveConstructorOptions -> modelIsUndef
    transformModel [
        label="transformModel(Ctor.options, data)"
    ]
    modelIsUndef -> transformModel [label="yes"]
    getPropsData [
        label="const propsData = extractPropsFromVNodeData(data, Ctor, tag)"
    ]
    modelIsUndef -> getPropsData
    transformModel -> getPropsData
    functionalIsTrue [
        label="isTrue(Ctor.options.functional)"
        shape=diamond
    ]
    getPropsData -> functionalIsTrue
    returnPureComponent [
        label="return createFunctionalComponent(Ctor, propsData, data, context, children)"
    ]
    functionalIsTrue -> returnPureComponent [label="yes"]
    getListeners [
        label="listeners = data.on"
    ]
    returnPureComponent -> getListeners
    functionalIsTrue -> getListeners
    getNativeOn [
        label="data.on = data.nativeOn"
    ]
    getListeners -> getNativeOn
    abstractIsTrue [
        label="isTrue(Ctor.options.abstract)"
        shape=diamond
    ]
    getNativeOn -> abstractIsTrue
    getSlot [
        label="slot = data.slot"
    ]
    abstractIsTrue -> getSlot [label="yes"]
    resetData [
        label="data = {}"
    ]
    getSlot -> resetData
    isSlot [
        label="slot"
        shape=diamond
    ]
    resetData -> isSlot
    saveSlot [
        label="data.slot = slot"
    ]
    isSlot -> saveSlot [label="yes"]
    mergeHooks [
        label="mergeHooks(data)"
    ]
    isSlot -> mergeHooks
    abstractIsTrue -> mergeHooks
    saveSlot -> mergeHooks
    varName [
        label="const name = Ctor.options.name || tag"
    ]
    mergeHooks -> varName
    varVnode [
        label="const vnode = new VNode()"
    ]
    varName -> varVnode
    returnVNode [
        label="return vnode"
    ]
    varVnode -> returnVNode
}