digraph G {
    subgraph cluster_validate {
        graph[style=dotted]
        label="validateProp(key, propsOptions, propsData, vm)"

        getProp [
            label="prop = propsOptions[key]"
        ]
        getValue [
            label="value = propsData[key]"
        ]

        getProp -> getValue

        handleBooleanType [
            shape=diamond
        ]

        getValue -> handleBooleanType [label="isType(Boolean, prop.type)"]

        // 处理 Boolean 类型
        resetValueBeFalse [
            label="value = false"
        ]
        resetValueBeTrue [
            label="value = true"
        ]

        handleBooleanType -> resetValueBeFalse [label="absent && !hasOwn(prop, 'default')"]
        handleBooleanType -> resetValueBeTrue [label="!isType(String, prop.type) && (value === '' || value === hyphenate(key))"]

        getDefaultValue [
            label="value = getPropDefaultValue(vm, prop, key)"
        ]

        resetValueBeFalse -> getDefaultValue [label="value === undefined"]
        resetValueBeTrue -> getDefaultValue [label="value === undefined"]
        getPrevShouldConvert [
            label="prevShouldConvert = observerState.shouldConvert"
        ]
        getDefaultValue -> getPrevShouldConvert
        resetShouldConvertBeTrue [
            label="observerState.shouldConvert = true"
        ]
        getPrevShouldConvert -> resetShouldConvertBeTrue
        observeValue [
            label="observe(value)"
        ]
        resetShouldConvertBeTrue -> observeValue

        resetShould [
            label="observerState.shouldConvert = prevShouldConvert"
        ]
        observeValue -> resetShould
        resetShould -> return
    }

    subgraph cluster_getDefaultProp {
        graph[style=dotted]
        label="getPropDefaultValue(vm, prop:propOptions, key)"

        returnUndefined [
            label="return undefined"
        ]

        start -> returnUndefined [label="!hasOwn(prop, 'default')"]

        getDef [
            label="def = prop.default"
        ]

        start -> getDef

        returnPropsValue [
            label="return vm._props[key]"
        ]
        getDef -> returnPropsValue [label="vm._props[key] !== undefined"]

        callDef [
            label="return def.call(vm) || def"
        ]
        getDef -> callDef [label="def is set"]
    }
}