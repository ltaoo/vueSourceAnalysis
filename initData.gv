digraph G {
    label="initData(vm, opts.data)"

    getData [
        label="data = vm.$options.data"
    ]

    resetData [
        label="data = typeof data === 'function' ? getData(data, vm) : data || {}"
    ]

    getData -> resetData

    dataIsPlain [
        label="!isPlainObject(data)"
        shape=diamond
    ]

    resetData -> dataIsPlain

    resetDataBecomeObj [
        label="data = {}"
    ]

    dataIsPlain -> resetDataBecomeObj [label="yes"]

    getKeys [
        label="keys = Object.keys(data)"
    ]
    resetDataBecomeObj -> getKeys
    getProps [
        label="props = vm.$options.props"
    ]
    getKeys -> getProps
    getMethods [
        label="methods = vm.$options.methods"
    ]
    getProps -> getMethods
    dataIsPlain -> getKeys [label="no"]

    while [
        label="while(i--)"
    ]
    getMethods -> while
    subgraph cluster_while {
        graph[style=dotted]
        getKey [
            label="key = keys[i]"
        ]
        while -> getKey

        hasProp [
            label="props && hasOwn(props, key)"
            shape=diamond
        ]

        getKey -> hasProp
        notReserved [
            label="!isReserved(key)"
            shape=diamond
        ]
        hasProp -> warn [label="yes"]
        hasProp -> notReserved [label="no"]
        proxy [
            label="proxy(vm, `_data`, key)"
        ]
        notReserved -> proxy [label="yes"]
    }

    observeData [
        label="observe(data, true /* asRootData */)"
    ]
    warn -> observeData
    proxy -> observeData

    subgraph cluster_getData {
        graph[style=dotted]
        label="getData(data, vm)"

        return [
            label="return data.call(vm, vm) || {}"
        ]
    }
}