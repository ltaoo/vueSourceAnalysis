digraph G {
    graph [
        label="core/instance/render.js"
        fontcolor=blue
    ]

    start [
        label="function initRender(vm) {"
    ]

    setVNode [
        label="vm._vnode = null"
        fontcolor=red
    ]
    start -> setVNode
    varOptions [
        label="const options = vm.$options"
    ]
    setVNode -> varOptions
    varParentVnode [
        label="const parentVnode = vm.$vnode = options._parentVnode"
        fontcolor=red
    ]
    varOptions -> varParentVnode
    varContext [
        label="renderContext = parentVnode && parentVnode.context"
    ]
    varParentVnode -> varContext
    setSlots [
        label="vm.$slots = resolveSlots()"
        fontcolor=red
    ]
    varContext -> setSlots
    setScopeSlots [
        label="vm.$scopedSlots = emptyObject"
        fontcolor=red
    ]
    setSlots -> setScopeSlots
    setCFunc [
        label="vm._c = (a, b, c, d) => createElement(vm, a, b, c, d, false)"
        fontcolor=red
    ]
    setScopeSlots -> setCFunc
    setCreateElementFunc [
        label="vm.$createElement = (a, b, c, d) => createElement(vm, a, b, c, d, true)"
        fontcolor=red
    ]
    setCFunc -> setCreateElementFunc
    varParentData [
        label="const parentData = parentVnode && parentVnode.data"
    ]
    setCreateElementFunc -> varParentData
    notProduction [
        label="process.env.NODE_ENV !== 'production'"
        shape=diamond
    ]
    varParentData -> notProduction
    defineReactive0 [
        label="defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, () => {
        !isUpdatingChildComponent && warn(`$attrs is readonly.`, vm)
        }, true)"
    ]
    notProduction -> defineReactive0 [label="yes"]

    defineReactive1 [
        label="defineReactive(vm, '$listeners', options._parentListeners || emptyObject, () => {
        !isUpdatingChildComponent && warn(`$listeners is readonly.`, vm)
        }, true)"
    ]
    defineReactive0 -> defineReactive1

    defineReactive2 [
        label="defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, null, true)"
    ]
    notProduction -> defineReactive2 [label="no"]
    defineReactive3 [
        label="defineReactive(vm, '$listeners', options._parentListeners || emptyObject, null, true)"
    ]
    defineReactive2 -> defineReactive3
}